@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.Text.Json
@using YmKB.UI.Components.Dialogs;
@using YmKB.UI.ConstantConfigs
@using YmKB.UI.Models
@using YmKB.UI.Models.SideMenu
@using YmKB.UI.Services
@inherits LayoutComponentBase

@code {
    [Inject] private LayoutService LayoutService { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] private AuthenticationService AuthenticationService { get; set; } = default!;

    // 使用默认主题，同时设置导航配置
    private MudTheme? _theme;
    private List<MenuSectionModel> _navProfile = NavMenuConfig.Default;
    private UserModel _user = new();

    protected override async Task OnInitializedAsync()
    {
        _theme = LayoutService.CurrentTheme;
        
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        _user = new()
        {
            DisplayName = user.Identity?.Name ?? "",
            Email = user.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Email)?.Value ?? "",
            Role = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? ""
        };
        // Console.WriteLine(JsonSerializer.Serialize(user.Identity));
    }

    public string DarkLightModeButtonIcon => !LayoutService.IsDarkMode switch
    {
        true => Icons.Material.Outlined.LightMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async Task OpenSearchDialog()
    {
        await CommonDialogService.ShowDialogAsync( 
            parameters: new DialogParameters<SearchDialog> { { x => x.NavProfile, _navProfile } },
            options: new DialogOptions
            {
                NoHeader = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            }
        );
    }
    
    private async Task HandleLogOut()
    {
        await AuthenticationService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}



<MudThemeProvider Theme="@_theme" IsDarkMode="@LayoutService.IsDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>YmKB - 智能知识库问答系统</PageTitle>

<MudLayout>
    @*顶部导航栏*@
    <MudAppBar Class="px-2" Elevation="0"
               Style="@(LayoutService.IsDarkMode ? "background: rgba(21,27,34,0.7)" : "background: rgba(255,255,255,0.7)")">
        @*当设置固定侧边路由菜单时，且屏幕不是大屏幕时显示一个切换按钮用于显示侧边路由*@
        @if (!LayoutService.CanMiniSideMenuDrawer)
        {
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudIconButton Class="mr-3" Color="Color.Default" Edge="Edge.Start" Icon="@Icons.Material.Filled.Menu"
                               OnClick="@LayoutService.ToggleDrawerOpen"/>
            </MudHidden>
        }
        <MudIconButton Class="ml-1" Color="Color.Default" Edge="Edge.Start" Icon="@Icons.Material.Filled.Search"
                       OnClick="OpenSearchDialog"/>
        <MudSpacer/>
        <MudIconButton Class="mx-3" Color="Color.Default" Icon="@Icons.Custom.Brands.GitHub"
                       Href="https://github.com" 
                       Target="_blank"/>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit"
                       OnClick="@(() => LayoutService.ToggleDarkMode())"/>
        <UserAvatar Class="ml-4" User="_user" LogOut="@HandleLogOut" />
    </MudAppBar>

    @*侧边导航栏*@
    <SideMenu @bind-CanMiniSideMenuDrawer="@LayoutService.CanMiniSideMenuDrawer"
              @bind-SideMenuDrawerOpen="@LayoutService.DrawerOpen"
              NavProfile="_navProfile"
              User="_user"/>

    @*主内容*@
    <MudMainContent>
        <MudContainer Class="mb-16 mt-4">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
