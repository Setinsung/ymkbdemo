@using System.Text.Json
@using YmKB.UI.Components.Dialogs;
@using YmKB.UI.ConstantConfigs
@using YmKB.UI.Models
@using YmKB.UI.Models.SideMenu
@using YmKB.UI.Services
@inherits LayoutComponentBase

@code {
    private bool _drawerOpen = false;
    private bool _canMiniSideMenuDrawer = true;
    private bool _searchDialogOpen;
    private MudTheme? _theme = Theme.AppTheme;
    private List<MenuSectionModel> _navProfile = NavMenuConfig.Default;

    [Inject] private LayoutService _layoutService { get; set; } = default!;
    [Inject] private IDialogService _dialogService { get; set; } = default!;

    private readonly UserModel _user = new()
    {
        Avatar = "./avatar.png",
        DisplayName = "MudDemo",
        Email = "muddemo@demo.com.au",
        Role = "Admin"
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public string DarkLightModeButtonIcon => !_layoutService.IsDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async Task OpenSearchDialog()
    {
        if (!_searchDialogOpen)
        {
            var options = new DialogOptions
            {
                NoHeader = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
            var parameters = new DialogParameters<SearchDialog> { { x => x.NavProfile, _navProfile } };

            var searchDialog = await _dialogService.ShowAsync<SearchDialog>("", parameters, options);
            _searchDialogOpen = true;

            await searchDialog.Result;
            _searchDialogOpen = false;
        }
    }

    private void Test(bool b)
    {
        Console.WriteLine($"_canMiniSideMenuDrawer {_canMiniSideMenuDrawer} _drawerOpen{_drawerOpen} {JsonSerializer.Serialize(b)}");
    }

}



<MudThemeProvider Theme="@_theme" IsDarkMode="@_layoutService.IsDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>YmKB - 智能知识库问答系统</PageTitle>

<MudLayout>
    @*顶部导航栏*@
    <MudAppBar Class="px-2" Elevation="0"
               Style="@(_layoutService.IsDarkMode ? "background: rgba(21,27,34,0.7)" : "background: rgba(255,255,255,0.7)")">
        @if (!_canMiniSideMenuDrawer)
        {
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudIconButton Class="mr-3" Color="Color.Default" Edge="Edge.Start" Icon="@Icons.Material.Filled.Menu"
                               OnClick="DrawerToggle"/>
            </MudHidden>
        }
        <MudIconButton Class="ml-1" Color="Color.Default" Edge="Edge.Start" Icon="@Icons.Material.Filled.Search"
                       OnClick="OpenSearchDialog"/>
        <MudSpacer/>
        <MudIconButton Class="mx-3" Color="Color.Default" Icon="@Icons.Custom.Brands.GitHub"
                       Link="https://gitee.com" Target="_blank"/>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@(() => _layoutService.ToggleDarkMode())"/>
        <UserAvatar Class="ml-4" User="_user"/>
        @* <MudButton OnClick="@(() => Console.WriteLine($"_canMiniSideMenuDrawer: {_canMiniSideMenuDrawer} + _drawerOpen: {_drawerOpen}"))">test</MudButton> *@
    </MudAppBar>

    @*侧边导航栏*@
    <SideMenu @bind-CanMiniSideMenuDrawer="_canMiniSideMenuDrawer"
              @bind-SideMenuDrawerOpen="_drawerOpen"
              NavProfile="_navProfile"
              User="_user"/>

    @*主内容*@
    <MudMainContent>
        <MudContainer Class="mb-16 mt-4">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
