@page "/aimodels"
@code {
    private List<AIModelDto> _aimodels = [];
    private string _searchString = "";
    private bool _loading;

    private CreateAIModelCommand _createAIModel = new(){AiModelType = AIModelType.Chat};
    private UpdateAIModelCommand _updateAIModel = new(){AiModelType = AIModelType.Chat};

    protected override async Task OnInitializedAsync()
    {
        await LoadAllAIModels();
    }

    private async Task LoadAllAIModels(string searchInput = "")
    {
        _searchString = searchInput;
        _loading = true;
        try
        {
            var result = await ApiClient.AIModels.Search.GetAsync(q => q.QueryParameters.SearchKeyword = _searchString);
            _loading = false;
            _aimodels = result ?? [];
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询模型配置列表失败");
            Snackbar.Add("查询模型配置列表失败", Severity.Error);
            _loading = false;
            _aimodels = [];
        }
    }

    private bool SearchFilter(AIModelDto model)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (model.ModelDescription is null || model.ModelName is null)
            return false;
        return model.ModelDescription.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
               || model.ModelName.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenCreateDialog()
    {
        await CommonDialogService.ShowDialogAsync(
            "新增模型",
            new DialogParameters<CreateAIModelDialog> { { x => x.Model, _createAIModel } },
            onConfirm: async _ =>
            {
                await ApiClient.AIModels.PostAsync(_createAIModel);
                await LoadAllAIModels();
                Snackbar.Add("模型创建成功", Severity.Success);
                _createAIModel = new(){AiModelType = AIModelType.Chat};
            }
        );
    }

    private async Task OpenEditDialog(AIModelDto model)
    {
        _updateAIModel = new()
        {
            Id = model.Id,
            ModelName = model.ModelName,
            ModelDescription = model.ModelDescription,
            AiModelType = model.AiModelType,
            Endpoint = model.Endpoint,
            ModelKey = model.ModelKey
        };
        await CommonDialogService.ShowDialogAsync(
            "新增模型",
            new DialogParameters<UpdateAIModelDialog> { { x => x.Model, _updateAIModel } },
            onConfirm: async _ =>
            {
                await ApiClient.AIModels.PutAsync(_updateAIModel);
                await LoadAllAIModels();
                Snackbar.Add("模型修改成功", Severity.Success);
                _updateAIModel = new(){AiModelType = AIModelType.Chat};
            }
        );
    }

    private async Task DeleteModel(AIModelDto model)
    {
        await CommonDialogService.ShowConfirmationDialog("确认删除", "您确定要删除所选项目吗？", async () =>
        {
            await ApiClient.AIModels.DeleteAsync(new DeleteAIModelCommand { Ids = [model.Id!] });
            await LoadAllAIModels();
            Snackbar.Add("删除成功", Severity.Success);
        });
    }

    private async Task TestModel(AIModelDto model)
    {
        await Task.Delay(2314);
        Snackbar.Add("测试成功！", Severity.Success);
    }

}
<MudText Typo="Typo.h5" Class="mb-4">模型管理</MudText>
<MudToolBar>
    <MudStack Row Spacing="1">
        <MudTextField T="string"
                      @bind-Value="_searchString" Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
        </MudTextField>
    </MudStack>
    <MudSpacer/>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateDialog">新增模型
    </MudFab>
</MudToolBar>
<MudDataGrid Items="@_aimodels" Loading="@_loading" Dense="true" Hover="true" QuickFilter="SearchFilter">
    <Columns>
        <TemplateColumn Title="#">
            <CellTemplate>
                @(_aimodels.IndexOf(context.Item) + 1)
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="e => e.ModelDescription" Title="模型名"/>
        <PropertyColumn Property="e => e.ModelName" Title="模型Id"/>
        <PropertyColumn Property="e => e.AiModelType" Title="模型类型">
            <CellTemplate>
                @switch (context.Item.AiModelType)
                {
                    case AIModelType.Chat:
                        <MudChip Class="pa-3" T="string" Variant="Variant.Text" Icon="@Icons.Material.Filled.Chat"
                                 Color="Color.Info" Size="Size.Small">
                            Chat
                        </MudChip>
                        break;
                    case AIModelType.Embedding:
                        <MudChip Class="pa-3" T="string" Variant="Variant.Text" Icon="@Icons.Material.Filled.Transform"
                                 Color="Color.Success" Size="Size.Small">
                            Embedding
                        </MudChip>
                        break;
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="e => e.Endpoint" Title="模型端点"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"
                                   OnClick="@(() => OpenEditDialog(context.Item))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                   OnClick="@(() => DeleteModel(context.Item))"/>
                    @*test model*@
                    <MudIconButton Icon="@Icons.Material.Filled.Terminal" OnClick="(()=> TestModel(context.Item))"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
