@page "/knowledgebases/create"
@page "/knowledgebases/{Id}/edit"
@using YmKB.UI.Models
@using YmKB.UI.Services
@inject IKnowledgeBaseService KnowledgeBaseService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudText Typo="Typo.h5" Class="mb-4">@(Id == null ? "新增知识库" : "编辑知识库")</MudText>

            <MudTextField @bind-Value="model.Name" Label="知识库名称" Required="true" RequiredError="知识库名称是必填项"/>
            <MudTextField @bind-Value="model.Description" Label="描述" Class="mt-3"/>

            <MudSelect T="string" Label="会话模型" @bind-Value="model.ConversationModel" Required="true" RequiredError="请选择会话模型" Class="mt-3">
                <MudSelectItem Value="@("【OpenAI】deepseek-rt-清血版")">【OpenAI】deepseek-rt-清血版</MudSelectItem>
            </MudSelect>

            <MudSelect T="string" Label="向量模型" @bind-Value="model.EmbeddingModel" Required="true" RequiredError="请选择向量模型" Class="mt-3">
                <MudSelectItem Value="@("【OpenAI】text-embedding-ada-002")">【OpenAI】text-embedding-ada-002</MudSelectItem>
            </MudSelect>

            <MudNumericField @bind-Value="model.SegmentTokens" Label="段落切片数(token)" Required="true" RequiredError="请输入段落切片数" Class="mt-3"/>
            <MudNumericField @bind-Value="model.LineTokens" Label="行切片数(token)" Required="true" RequiredError="请输入行切片数" Class="mt-3"/>
            <MudNumericField @bind-Value="model.OverlapTokens" Label="重叠部分(token)" Required="true" RequiredError="请输入重叠部分" Class="mt-3"/>

            @* <MudSwitch @bind-Checked="model.EnableOcr" Label="是否开启OCR" Color="Color.Primary" Class="mt-3"/> *@

            <MudStack Row="true" Class="mt-6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Disabled="@(!success)">保存</MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="GoBack">返回</MudButton>
            </MudStack>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public string? Id { get; set; }

    private KnowledgeBase model = new();
    private bool success;
    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var kb = await KnowledgeBaseService.GetKnowledgeBaseAsync(Id);
            if (kb != null)
            {
                model = kb;
            }
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            if (string.IsNullOrEmpty(Id))
            {
                await KnowledgeBaseService.CreateKnowledgeBaseAsync(model);
            }
            else
            {
                await KnowledgeBaseService.UpdateKnowledgeBaseAsync(model);
            }
            NavigationManager.NavigateTo("/knowledgebases");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/knowledgebases");
    }
} 