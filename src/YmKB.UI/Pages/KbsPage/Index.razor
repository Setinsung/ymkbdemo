@page "/knowledgebases"
@code {
    private PaginatedResultOfKnowledgeDbDto _kbs = new();
    private string _searchString = "";
    private bool _loading;
    private int pageIndex = 1;
    private int pageSize = 12;
    private int totalCount = 0;

    // private IEnumerable<KnowledgeBase> filteredKnowledgeBases => knowledgeBases
    //     .Where(x => string.IsNullOrWhiteSpace(_searchString) ||
    //                 x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
    //                 x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await LoadAllKbs();
    }

    private async Task LoadAllKbs()
    {
        _loading = true;
        try
        {
            PaginatedResultOfKnowledgeDbDto? result = await ApiClient.KnowledgeDbs.Pagination.PostAsync(new KnowledgeDbsWithPaginationQuery()
            {
                Keywords = _searchString,
                PageNumber = pageIndex - 1,
                PageSize = pageSize,
                OrderBy = "Id"
            });
            _loading = false;
            _kbs = result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询模型配置列表失败");
            Snackbar.Add("查询模型配置列表失败", Severity.Error);
            _loading = false;
            _kbs = new();
        }    }

    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadAllKbs();
            // StateHasChanged();
        }
    }

    private void CreateKnowledgeBase()
    {
        Navigation.NavigateTo("/knowledgebases/create");
    }

    private void ViewKnowledgeBase(string id)
    {
        Navigation.NavigateTo($"/knowledgebases/{id}");
    }

    private void EditKnowledgeBase(string id)
    {
        Navigation.NavigateTo($"/knowledgebases/{id}/edit");
    }

    private async Task DeleteKnowledgeBase(string id)
    {
        await CommonDialogService.ShowConfirmationDialog("确认删除", "您确定要删除所选项目吗？", async () =>
        {
            await ApiClient.KnowledgeDbs.DeleteAsync(new DeleteKnowledgeDbCommand { Ids = [id] });
            await LoadAllKbs();
            Snackbar.Add("删除成功", Severity.Success);
        });
    }

    private async Task PageChanged(int i)
    {
        pageIndex = i;
        await LoadAllKbs();
    }

}

<MudText Typo="Typo.h5" Class="mb-4">知识库管理</MudText>

<MudToolBar>
    <MudStack Row Spacing="1">
        <MudTextField T="string"
                      @bind-Value="_searchString" Adornment="Adornment.End" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                      OnKeyDown="@SearchOnEnter">
        </MudTextField>
    </MudStack>
    <MudSpacer/>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateKnowledgeBase">新增模型
    </MudFab>
</MudToolBar>
@if (_loading)
{
    <div class="d-flex flex-column align-center mt-4">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    </div>
}
<MudGrid>
    @foreach (var kb in _kbs.Items ?? [])
    {
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="card-hover-effect overflow-hidden">
                <MudCardHeader>
                    <CardHeaderContent>
                        <div class="d-flex align-start">
                            <MudIcon Class="mt-2" Icon="@Icons.Material.Outlined.Info" Size="Size.Large" Color="Color.Primary"/>
                            <div class="ml-4">
                                <MudText Typo="Typo.h6">@kb.Name</MudText>
                                <MudTooltip Text="@kb.Description">
                                    <MudText Typo="Typo.body2" Class="truncate-text">@kb.Description</MudText>
                                </MudTooltip>
                            </div>
                        </div>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>
                        <MudChip T="string" Size="Size.Small" Variant="Variant.Text" Color="Color.Secondary">
                            文档数量: 0</MudChip>
                    </MudText>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-end">
                    <MudButton OnClick="@(() => ViewKnowledgeBase(kb.Id))">查看</MudButton>
                    <MudButton OnClick="@(() => EditKnowledgeBase(kb.Id))">修改</MudButton>
                    <MudButton Color="Color.Error" OnClick="()=>DeleteKnowledgeBase(kb.Id)">删除</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>
<div class="d-flex flex-column align-center mt-4">
    <MudPagination ShowFirstButton="true" ShowLastButton="true" Class="mt-4"
                   Count="@(_kbs.TotalPages ?? 0)"
                   SelectedChanged="PageChanged"/>
</div>
<style>
    .truncate-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 110px;
    }
</style>
