@page "/knowledgebases/{Id}"
@using System.Text.Json
@using Microsoft.Kiota.Abstractions
@using MudBlazor.Extensions.Options
@inject IJSRuntime JS
@inject IDialogService DialogService
@implements IDisposable

@code {
    [Parameter] public string? Id { get; set; }

    private Dictionary<string, string> _fileNameWithContentTypes = [];
    private int _activeTab;
    MudTabs tabs;
    private System.Timers.Timer? _pollingTimer;
    private bool _isLoading;
    private PaginatedResultOfKbDocFileDto _kbDocs = new();
    private PaginatedResultOfQuantizedListDto _quantifyLists = new();

    private string _docSearchString = "";
    private int _kbDoc_pageIndex = 1;
    private int _kbDoc_pageSize = 12;

    private string _quantifyListSearchString = "";
    private int _quantifyList_pageIndex = 1;
    private int _quantifyList_pageSize = 12;

    private string _vectorSearchString;
    private SearchedVectorsDto? _searchedVectorsDto = null;
    private double _minRelevance = 0;


    protected override async Task OnInitializedAsync()
    {
        // _searchedVectorsDto = new SearchedVectorsDto(){Results = [new SearchVectorItem()
        // {
        //     Content = "这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容",
        //     DocumentId = "awdawdadawdad",
        //     Relevance = 0.71031314111,
        //     FileName = "测试文件.docx"
        // },new SearchVectorItem()
        // {
        //     Content = "这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容",
        //     DocumentId = "awdawdadawdad",
        //     Relevance = 0.71031314111,
        //     FileName = "测试文件.docx"
        // },new SearchVectorItem()
        // {
        //     Content = "这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容",
        //     DocumentId = "awdawdadawdad",
        //     Relevance = 0.71031314111,
        //     FileName = "测试文件.docx"
        // },new SearchVectorItem()
        // {
        //     Content = "这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容",
        //     DocumentId = "awdawdadawdad",
        //     Relevance = 0.71031314111,
        //     FileName = "测试文件.docx"
        // },new SearchVectorItem()
        // {
        //     Content = "这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容这是一个测试内容",
        //     DocumentId = "awdawdadawdad",
        //     Relevance = 0.71031314111,
        //     FileName = "测试文件.docx"
        // }]};
        await LoadKbDocs();
        await LoadQuantifyLists();
    }

    private async Task Activate(int index)
    {
        tabs.ActivatePanel(index);
        await Refresh();
    }


    private async Task LoadKbDocs()
    {
        try
        {
            PaginatedResultOfKbDocFileDto? result = await ApiClient.KbDocFiles.Pagination.PostAsync(new KbDocFilesWithPaginationQuery()
            {
                KbId = Id,
                Keywords = _docSearchString,
                PageNumber = _kbDoc_pageIndex - 1,
                PageSize = _kbDoc_pageSize,
                OrderBy = "Id"
            });
            _kbDocs = result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询失败");
            Snackbar.Add("查询失败", Severity.Error);
            _kbDocs = new();
        }
    }

    private async Task KbDocPageChanged(int i)
    {
        _kbDoc_pageIndex = i;
        await LoadKbDocs();
    }

    private async Task QuantifyListPageChanged(int i)
    {
        _quantifyList_pageIndex = i;
        await LoadQuantifyLists();
    }

    private async Task ShowUploadDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(MudExMessageDialog.Buttons), MudExDialogResultAction.OkCancel("Upload") },
            { nameof(MudExMessageDialog.Icon), Icons.Material.Filled.FileUpload }
        };
        var res = await DialogService.ShowComponentInDialogAsync<UploadDocFileDialog>("上传文档", "", e => { }, parameters, options =>
        {
            options.Resizeable = true;
            options.FullWidth = true;
            options.MaxWidth = MaxWidth.Medium;
        });
        // 上传文件接口
        if (!res.DialogResult.Canceled && res.Component.UploadRequests.Any())
        {
            // 创建一个字典存储文件名称.后缀和文件contenttype
            _fileNameWithContentTypes = res.Component.UploadRequests.ToDictionary(x => x.FileName, x => x.ContentType);

            // todo上传后可以按钮变为加载
            var antiforgeryToken = await ApiClient.FileManagement.AntiforgeryToken.GetAsync();
            var request = new MultipartBody();
            request.AddOrReplacePart("overwrite", "text/plain", "false");
            request.AddOrReplacePart("folder", "text/plain", $"{DateTime.UtcNow.ToString("yyyyMMdd")}");

            request.AddOrReplacePart($"{antiforgeryToken.HeaderName}", "text/plain", $"{antiforgeryToken.RequestToken}");
            var i = 0;
            var uploads = res.Component.UploadRequests;
            Console.WriteLine(JsonSerializer.Serialize(uploads));
            foreach (var upload in uploads)
            {
                var filename = upload.FileName;
                var stream = new MemoryStream(upload.Data);
                request.AddOrReplacePart($"files[{i++}]", "application/octet-stream", stream, filename);
            }

            var response = await ApiClient.FileManagement.Upload.PostAsync(request, q => q.Headers.Add($"{antiforgeryToken.HeaderName}", $"{antiforgeryToken.RequestToken}"));
            if (response is not null && response.Any())
            {
                Snackbar.Add("文件上传成功", Severity.Success);
                Console.WriteLine(JsonSerializer.Serialize(response));
                await CreateKbDocFileAssociation(response);
            }
        }
    }

    private async Task ShowWebSiteUploadDialog()
    {
        await CommonDialogService.ShowDialogAsync(
            "网页上传",
            new DialogParameters<ShowWebSiteUploadDialog>(),
            onConfirm: async res =>
            {
                var url = (string)res.Data;
                await ApiClient.KbDocFiles.PostAsync(new CreateKbDocFileCommand()
                {
                    KbId = Id,
                    FileName = url,
                    Type = "web",
                    Size = 0,
                    Url = url
                });
                Snackbar.Add("网页上传成功", Severity.Success);
                await Activate(1);
                Snackbar.Add("量化队列创建完成", Severity.Success);
            }
        );
    }

    private async Task CreateKbDocFileAssociation(List<FileUploadResponse> fileuploaded)
    {
        // 文件上传创建kbdocfile关联知识库
        foreach (var file in fileuploaded)
        {
            await ApiClient.KbDocFiles.PostAsync(new CreateKbDocFileCommand()
            {
                KbId = Id,
                FileName = file.FileName,
                Type = _fileNameWithContentTypes[file.FileName],
                Size = file.Size,
                Url = file.Path
            });
        }

        await Activate(1);
        Snackbar.Add("量化队列创建完成", Severity.Success);
    }

    private async Task CopyDocumentUrl(string? url)
    {
        if (!string.IsNullOrEmpty(url))
        {
            await new ClipboardInterop(JS).CopyToClipboard(CombinePathWithBaseUrl(appSettings.ServiceBaseUrl, url));
        }
    }

    private async Task DeleteDocument(string? id)
    {
        await CommonDialogService.ShowConfirmationDialog("确认删除", "您确定要删除所选项目吗？", async () =>
        {
            await ApiClient.KbDocFiles.DeleteAsync(new DeleteKbDocFileCommand { Ids = [id!] });
            await LoadKbDocs();
            Snackbar.Add("删除成功", Severity.Success);
        });
    }

    private async Task DownloadDocument(KbDocFileDto? file)
    {
        if (file is null) return;
        await JS.InvokeVoidAsync("triggerFileDownload", file.FileName, CombinePathWithBaseUrl(appSettings.ServiceBaseUrl, file.Url!));
    }

    private async Task KbDocsSearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadKbDocs();
        }
    }

    private async Task LoadQuantifyLists()
    {
        try
        {
            var result = await ApiClient.QuantizedLists.Pagination.PostAsync(new QuantizedListsWithPaginationQuery()
            {
                KbId = Id,
                Keywords = _quantifyListSearchString,
                PageNumber = _quantifyList_pageIndex - 1,
                PageSize = _quantifyList_pageSize,
                OrderBy = "Id"
            });
            _quantifyLists = result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询失败");
            Snackbar.Add("查询失败", Severity.Error);
            _kbDocs = new();
        }
    }

    private async Task quantifyListSearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadQuantifyLists();
        }
    }

    private async Task Refresh()
    {
        if (_activeTab == 0)
        {
            await LoadKbDocs();
        }

        if (_activeTab == 1)
        {
            await LoadQuantifyLists();
            // 检查是否有loading状态的任务
            var hasLoading = _quantifyLists.Items.Any(t => t.Status is QuantizedListState.Pending);
            if (hasLoading)
            {
                StartPolling();
            }
        }

        // 当tab页不处于量化列表时，清理timer
        if (_activeTab != 1 && _pollingTimer is not null)
        {
            _pollingTimer?.Stop();
            _pollingTimer?.Dispose();
            _pollingTimer = null;
        }
        StateHasChanged();
    }

    private void StartPolling()
    {
        _pollingTimer?.Dispose();
        _pollingTimer = new System.Timers.Timer(5000);
        _pollingTimer.Elapsed += async (sender, e) =>
        {
            try
            {
                var result = await ApiClient.QuantizedLists.Pagination.PostAsync(new QuantizedListsWithPaginationQuery()
                {
                    KbId = Id,
                    Keywords = _quantifyListSearchString,
                    PageNumber = _quantifyList_pageIndex - 1,
                    PageSize = _quantifyList_pageSize,
                    OrderBy = "Id"
                });
                if (result.Items.Any(t => t.Status is QuantizedListState.Pending))
                {
                    Logger.LogInformation("量化队列进行中...");
                }
                else
                {
                    Logger.LogInformation("全部停止");
                    await Refresh();
                    _pollingTimer.Stop();
                    _pollingTimer?.Dispose();
                    _pollingTimer = null;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "轮询时出错");
                _pollingTimer.Stop();
                _pollingTimer?.Dispose();
                _pollingTimer = null;
            }
        };
        _pollingTimer.AutoReset = true;
        _pollingTimer.Enabled = true;
        _pollingTimer.Start();
    }


    private async Task DeleteQuantizedList(string? id)
    {
        await CommonDialogService.ShowConfirmationDialog("确认删除", "您确定要删除所选项目吗？", async () =>
        {
            await ApiClient.QuantizedLists.DeleteAsync(new DeleteQuantizedListCommand() { Ids = [id!] });
            await LoadQuantifyLists();
            Snackbar.Add("删除成功", Severity.Success);
        });
    }

    private async Task OnVectorSearchTest()
    {
        _searchedVectorsDto = null;
        _isLoading = true;
        try
        {
            _searchedVectorsDto = await ApiClient.KnowledgeDbs.SearchVectorTest.GetAsync(q =>
            {
                q.QueryParameters.KbId = Id;
                q.QueryParameters.Search = _vectorSearchString;
                q.QueryParameters.MinRelevance = _minRelevance;
            });
            Snackbar.Add($"查询成功，用时 {_searchedVectorsDto.ElapsedTime}mm", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询失败");
            Snackbar.Add("查询失败", Severity.Error);
            _searchedVectorsDto = null;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ShowContentDialog(string? content = "")
    {
        var options = new DialogOptionsEx()
        {
            MaximizeButton = true,
            CloseButton = true,
            FullHeight = true,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            MaxHeight = MaxHeight.False,
            FullWidth = true,
            DragMode = MudDialogDragMode.Simple,
            Animations = [AnimationType.SlideIn],
            Position = DialogPosition.CenterRight,
            DisableSizeMarginY = true,
            DisablePositionMargin = true
        };
        await DialogService.ShowExAsync<ShowContentDialog>("", dialog => { dialog.ContentMessage = content; }, options);
    }

    private async Task GetKbDocFileVectors(string? id)
    {
        if (id is null) return;
        var options = new DialogOptionsEx()
        {
            MaximizeButton = true,
            CloseButton = true,
            FullHeight = true,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            MaxHeight = MaxHeight.False,
            FullWidth = true,
            DragMode = MudDialogDragMode.Simple,
            Animations = [AnimationType.SlideIn],
            Position = DialogPosition.CenterRight,
            DisableSizeMarginY = true,
            DisablePositionMargin = true
        };
        await DialogService.ShowExAsync<ShowKbDocFileVectorListDialog>("", dialog => { dialog.KbDocFileId = id; }, options);
    }


    public void Dispose()
    {
        if (_pollingTimer != null)
        {
            _pollingTimer.Stop();
            _pollingTimer?.Dispose();
            _pollingTimer = null;
        }
    }

}

<MudTabs @bind-ActivePanelIndex="_activeTab" @ref="tabs" Rounded="true" Class="kbs-tabs">
    <MudTabPanel Icon="@Icons.Material.Filled.DocumentScanner" Text="文档上传">
        <MudToolBar Class="align-center">
            <MudStack Row Spacing="1">
                <MudTextField T="string"
                              @bind-Value="_docSearchString" Adornment="Adornment.End" @onkeypress="KbDocsSearchOnEnter"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                </MudTextField>
            </MudStack>
            <MudSpacer/>
            <MudFab Class="mr-4" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Web"
                    OnClick="ShowWebSiteUploadDialog">网页上传
            </MudFab>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload"
                    OnClick="ShowUploadDialog">文档上传
            </MudFab>
        </MudToolBar>
        <MudTable Items="@_kbDocs.Items" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm"
                  Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>文件名称</MudTh>
                <MudTh>文件类型</MudTh>
                <MudTh>文件大小</MudTh>
                <MudTh>文件状态</MudTh>
                <MudTh>上传时间</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="文件名称">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@context.FileName</MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="文件类型">
                    <MudTooltip Text="@context.Type">
                        <ChildContent>
                            <MudChip T="string" Size="Size.Small">@TruncateText(context.Type, 20)</MudChip>
                        </ChildContent>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="文件大小">@FormatFileSize(context.Size!.Value)</MudTd>

                <MudTd DataLabel="文件大小">
                    @switch (context.Status)
                    {
                        case NullableOfQuantizationState.Loading:
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@context.Status</MudChip>
                            break;
                        case NullableOfQuantizationState.Accomplish:
                            <MudChip T="string" Size="Size.Small" Color="Color.Success">@context.Status</MudChip>
                            break;
                        default:
                            <MudChip T="string" Size="Size.Small" Color="Color.Error">@context.Status</MudChip>
                            break;
                    }
                </MudTd>
                <MudTd DataLabel="上传时间">@FormatDateTimeOst(context.Created!.Value)</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Size="Size.Small"
                                   OnClick="@(() => GetKbDocFileVectors(context.Id))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small"
                                   OnClick="@(() => CopyDocumentUrl(context.Url))"/>
                    @if (context.Type == "web")
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.NearMe" Size="Size.Small"
                                       Href="@(context.Url)" Target="_blank"/>
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Download" Size="Size.Small"
                                       OnClick="@(() => DownloadDocument(context))"/>
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                   OnClick="@(() => DeleteDocument(context.Id))"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <div class="d-flex flex-column align-center mt-4">
            <MudPagination ShowFirstButton="true" ShowLastButton="true" Class="mt-4"
                           Count="@(_kbDocs.TotalPages ?? 0)"
                           SelectedChanged="KbDocPageChanged"/>
        </div>
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.Build" Text="量化队列">
        <MudToolBar Class="align-center">
            <MudStack Row Spacing="1">
                <MudTextField T="string"
                              @bind-Value="_quantifyListSearchString" Adornment="Adornment.End"
                              @onkeypress="quantifyListSearchOnEnter"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                </MudTextField>
            </MudStack>
            <MudSpacer/>
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh"
                       OnClick="Refresh">刷新
            </MudButton>
        </MudToolBar>
        <MudTable Items="@_quantifyLists.Items" Hover="true">
            <HeaderContent>
                <MudTh>文件名</MudTh>
                <MudTh>任务Id</MudTh>
                <MudTh>进度</MudTh>
                <MudTh>状态</MudTh>
                <MudTh>备注</MudTh>
                <MudTh>创建时间</MudTh>
                <MudTh>完成时间</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="文件名">@context.FileName</MudTd>
                <MudTd DataLabel="任务Id">@context.Id</MudTd>
                <MudTd DataLabel="进度">
                    @switch (context.Status)
                    {
                        case QuantizedListState.Pending:
                            <MudProgressLinear Value="100" Indeterminate="true" Color="Color.Info"
                                               Style="min-width:100px;"/>
                            break;
                        case QuantizedListState.Success:
                            <MudProgressLinear Value="100" Indeterminate="false" Color="Color.Success"
                                               Style="min-width:100px;"/>
                            break;
                        default:
                            <MudProgressLinear Value="100" Indeterminate="false" Color="Color.Error"
                                               Style="min-width:100px;"/>
                            break;
                    }
                </MudTd>
                <MudTd DataLabel="状态">
                    @switch (context.Status)
                    {
                        case QuantizedListState.Pending:
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@context.Status</MudChip>
                            break;
                        case QuantizedListState.Success:
                            <MudChip T="string" Size="Size.Small" Color="Color.Success">@context.Status</MudChip>
                            break;
                        default:
                            <MudChip T="string" Size="Size.Small" Color="Color.Error">@context.Status</MudChip>
                            break;
                    }
                </MudTd>
                <MudTd DataLabel="备注">
                    <MudTooltip Text="@context.Remark">
                        <ChildContent>
                            @TruncateText(context.Remark, 40)
                        </ChildContent>
                    </MudTooltip>
                </MudTd>
                <MudTd
                    DataLabel="上传时间">@(context.Created != null ? FormatDateTimeOst(context.Created.Value) : "")</MudTd>
                <MudTd
                    DataLabel="完成时间">@(context.ProcessTime != null ? FormatDateTimeOst(context.ProcessTime.Value) : "")</MudTd>
                <MudTd>
                    @if (context.Status == QuantizedListState.Fail)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                       OnClick="@(() => DeleteQuantizedList(context.Id))"/>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
        <div class="d-flex flex-column align-center mt-4">
            <MudPagination ShowFirstButton="true" ShowLastButton="true" Class="mt-4"
                           Count="@(_quantifyLists.TotalPages ?? 0)"
                           SelectedChanged="QuantifyListPageChanged"/>
        </div>
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.ContentPasteSearch" Text="搜索测试">
        <MudGrid Class="mt-4">
            <MudItem xs="12" sm="6">
                <MudSlider @bind-Value="_minRelevance" Min="0" Max="1" Step="0.01" Color="Color.Info">
                    最小相似度: @_minRelevance</MudSlider>
                <MudTextField @bind-Value="_vectorSearchString"
                              Label="请输入搜索内容..." Variant="Variant.Outlined"
                              Lines="5"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Class="w-100 mb-2"/>
                <MudButton Disabled="_isLoading" Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="OnVectorSearchTest">搜索
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="6">
                @if (_isLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                }
                @if (_searchedVectorsDto is not null)
                {
                    <MudGrid>
                        @foreach (var result in _searchedVectorsDto.Results!)
                        {
                            <MudItem xs="12" sm="12">
                                <MudCard Class="card-hover-effect mb-3">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <div class="d-flex align-center justify-space-between">
                                                <MudText Typo="Typo.subtitle2">@result.FileName</MudText>
                                                <MudText Typo="Typo.subtitle2">
                                                    <MudChip Size="Size.Small" T="double" Color="Color.Success"
                                                             Variant="Variant.Outlined">
                                                        相似度: @result.Relevance</MudChip>
                                                </MudText>
                                            </div>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText>
                                            @(TruncateText(result.Content, 100))
                                        </MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Color="Color.Primary" Size="Size.Small"
                                                   OnClick="@(() => ShowContentDialog(result.Content))">查看详情
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudItem>

        </MudGrid>
    </MudTabPanel>
</MudTabs>
<style>
    .kbs-tabs .mud-tabs-tabbar {
        background-color: transparent;
    }

    .file-item {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .file-item-contenttype {
        font-style: italic;
        opacity: 0.8;
    }
</style>