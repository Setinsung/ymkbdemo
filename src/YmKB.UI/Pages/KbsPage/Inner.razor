@page "/knowledgebases/{Id}"
@using System.Text.Json
@using Microsoft.Kiota.Abstractions
@using MudBlazor.Extensions.Core
@using YmKB.UI.Services.JsInterops
@inject IJSRuntime JS
@inject IDialogService DialogService

@code {
    [Parameter] public string? Id { get; set; }

    private Dictionary<string, string> _fileNameWithContentTypes = [];
    private int _activeTab;
    private PaginatedResultOfKbDocFileDto _kbDocs = new();
    private PaginatedResultOfQuantizedListDto _quantifyLists = new();
    private string _docSearchString = "";
    private string _quantifyListSearchString = "";
    private int _kbDoc_pageIndex = 1;
    private int _kbDoc_pageSize = 12;
    
    private int _quantifyList_pageIndex = 1;
    private int _quantifyList_pageSize = 12;
    
    
    private string _vectorSearchString = "";
    private List<SearchResult> _searchResults = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadKbDocs();
        await LoadQuantifyLists();
    }

    private async Task LoadKbDocs()
    {
        try
        {
            PaginatedResultOfKbDocFileDto? result = await ApiClient.KbDocFiles.Pagination.PostAsync(new KbDocFilesWithPaginationQuery()
            {
                KbId = Id,
                Keywords = _docSearchString,
                PageNumber = _kbDoc_pageIndex - 1,
                PageSize = _kbDoc_pageSize,
                OrderBy = "Id"
            });
            _kbDocs = result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询失败");
            Snackbar.Add("查询失败", Severity.Error);
            _kbDocs = new();
        }
    }

    private async Task KbDocPageChanged(int i)
    {
        _kbDoc_pageIndex = i;
        await LoadKbDocs();
    }
    
    private async Task QuantifyListPageChanged(int i)
    {
        _quantifyList_pageIndex = i;
        await LoadQuantifyLists();
    }
    

    private string[] _mimeTypes =
    {
        "application/zip*",
        "application/x-zip*",
        "application/x-compressed",
        "application/x-rar-compressed",
        "audio/*",
        "application/pdf",
        "application/xml",
        "text/markdown",
        "application/msword",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.*",
        "image/*",
        "text/*"
    };

    private async Task ShowUploadDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(MudExMessageDialog.Buttons), MudExDialogResultAction.OkCancel("Upload") },
            { nameof(MudExMessageDialog.Icon), Icons.Material.Filled.FileUpload }
        };
        var res = await DialogService.ShowComponentInDialogAsync<MudExUploadEdit<UploadableFile>>("上传内容", "拖放文件或点击上传",
            uploadEdit =>
            {
                uploadEdit.AllowAudioRecording = true;
                uploadEdit.MinHeight = 250;
                uploadEdit.AutoExtractArchive = true;
                uploadEdit.DropZoneClickAction = DropZoneClickAction.UploadFile;
                uploadEdit.MimeTypes = _mimeTypes;
            }, parameters, options =>
            {
                options.Resizeable = true;
                options.FullWidth = true;
                options.MaxWidth = MaxWidth.Medium;
                options.DialogAppearance = MudExAppearance.FromStyle(new
                {
                    Border = "2px solid",
                    BorderColor = Color.Primary,
                    BorderRadius = 8
                });
            });
        // 上传文件接口
        if (!res.DialogResult.Canceled && res.Component.UploadRequests.Any())
        {
            // 创建一个字典存储文件名称.后缀和文件contenttype
            _fileNameWithContentTypes = res.Component.UploadRequests.ToDictionary(x => x.FileName, x => x.ContentType);

            // todo上传后可以按钮变为加载
            var antiforgeryToken = await ApiClient.FileManagement.AntiforgeryToken.GetAsync();
            var request = new MultipartBody();
            request.AddOrReplacePart("overwrite", "text/plain", "false");
            request.AddOrReplacePart("folder", "text/plain", $"{DateTime.UtcNow.ToString("yyyyMMdd")}");

            request.AddOrReplacePart($"{antiforgeryToken.HeaderName}", "text/plain", $"{antiforgeryToken.RequestToken}");
            var i = 0;
            var uploads = res.Component.UploadRequests;
            Console.WriteLine(JsonSerializer.Serialize(uploads));
            foreach (var upload in uploads)
            {
                var filename = upload.FileName;
                var stream = new MemoryStream(upload.Data);
                request.AddOrReplacePart($"files[{i++}]", "application/octet-stream", stream, filename);
            }

            var response = await ApiClient.FileManagement.Upload.PostAsync(request, q => q.Headers.Add($"{antiforgeryToken.HeaderName}", $"{antiforgeryToken.RequestToken}"));
            if (response is not null && response.Any())
            {
                Snackbar.Add("文件上传成功", Severity.Success);
                Console.WriteLine(JsonSerializer.Serialize(response));
                await CreateKbDocFileAssociation(response);
            }
        }
    }

    private async Task CreateKbDocFileAssociation(List<FileUploadResponse> fileuploaded)
    {
        // 文件上传创建kbdocfile关联知识库
        foreach (var file in fileuploaded)
        {
            await ApiClient.KbDocFiles.PostAsync(new CreateKbDocFileCommand()
            {
                KbId = Id,
                FileName = file.FileName,
                Type = _fileNameWithContentTypes[file.FileName],
                Size = file.Size,
                Url = file.Path
            });
        }

        await LoadKbDocs();
    }
    
    private async Task CopyDocumentUrl(string? url)
    {
        if (!string.IsNullOrEmpty(url))
        {
            await new ClipboardInterop(JS).CopyToClipboard(CombinePathWithBaseUrl(appSettings.ServiceBaseUrl, url));
        }
    }

    private async Task DeleteDocument(string? id)
    {
        await CommonDialogService.ShowConfirmationDialog("确认删除", "您确定要删除所选项目吗？", async () =>
        {
            await ApiClient.KbDocFiles.DeleteAsync(new DeleteKbDocFileCommand { Ids = [id!] });
            await LoadKbDocs();
            Snackbar.Add("删除成功", Severity.Success);
        });
    }

    private async Task DownloadDocument(KbDocFileDto? file)
    {
        if (file is null) return;
        await JS.InvokeVoidAsync("triggerFileDownload", file.FileName, CombinePathWithBaseUrl(appSettings.ServiceBaseUrl, file.Url!));
    }
    
    private async Task KbDocsSearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadKbDocs();
        }
    }
        
    private async Task LoadQuantifyLists()
    {
        try
        {
            var result = await ApiClient.QuantizedLists.Pagination.PostAsync(new QuantizedListsWithPaginationQuery()
            {
                KbId = Id,
                Keywords = _quantifyListSearchString,
                PageNumber = _quantifyList_pageIndex - 1,
                PageSize = _quantifyList_pageSize,
                OrderBy = "Id"
            });
            _quantifyLists = result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询失败");
            Snackbar.Add("查询失败", Severity.Error);
            _kbDocs = new();
        }
    }
    
    private async Task quantifyListSearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadQuantifyLists();
        }
    }
    
    

    private List<QuantTask> _quantTasks = new()
    {
        new QuantTask { Id = "Q20240501", FileName = "产品手册.pdf", Progress = 100, Status = "完成" },
        new QuantTask { Id = "Q20240502", FileName = "技术白皮书.docx", Progress = 60, Status = "进行中" },
        new QuantTask { Id = "Q20240503", FileName = "FAQ.xlsx", Progress = 30, Status = "进行中" }
    };

    private void OnSearch()
    {
        _searchResults = new List<SearchResult>
        {
            new SearchResult { FileName = "产品手册.pdf", Score = 0.92, Snippet = "本产品支持多种接入方式..." },
            new SearchResult { FileName = "技术白皮书.docx", Score = 0.85, Snippet = "系统架构采用分布式设计..." }
        };
    }

    public class QuantTask
    {
        public string Id { get; set; }
        public string FileName { get; set; }
        public int Progress { get; set; }
        public string Status { get; set; }
    }

    public class SearchResult
    {
        public string FileName { get; set; }
        public double Score { get; set; }
        public string Snippet { get; set; }
    }

    private async Task Refresh()
    {
        await LoadKbDocs();
        await LoadQuantifyLists();
    }

}

<MudTabs @bind-ActivePanelIndex="_activeTab" Rounded="true" Class="kbs-tabs">
    <MudTabPanel Icon="@Icons.Material.Filled.DocumentScanner" Text="文档上传">
        <MudToolBar Class="align-center">
            <MudStack Row Spacing="1">
                <MudTextField T="string"
                              @bind-Value="_docSearchString" Adornment="Adornment.End" @onkeypress="KbDocsSearchOnEnter"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                </MudTextField>
            </MudStack>
            <MudSpacer/>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload"
                    OnClick="ShowUploadDialog">文档上传
            </MudFab>
        </MudToolBar>
        <MudTable Items="@_kbDocs.Items" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm"
                  Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>文件名称</MudTh>
                <MudTh>文件类型</MudTh>
                <MudTh>文件大小</MudTh>
                <MudTh>文件状态</MudTh>
                <MudTh>上传时间</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="文件名称">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@context.FileName</MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="文件类型">
                        <MudTooltip Text="@context.Type">
                            <ChildContent>
                                <MudChip T="string" Size="Size.Small">@TruncateText(context.Type, 20)</MudChip>
                            </ChildContent>
                        </MudTooltip>
                </MudTd>
                <MudTd DataLabel="文件大小">@FormatFileSize(context.Size!.Value)</MudTd>
                
                <MudTd DataLabel="文件大小">
                    @switch (context.Status)
                    {
                        case NullableOfQuantizationState.Loading:
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@context.Status</MudChip>
                            break;
                        case NullableOfQuantizationState.Accomplish:
                            <MudChip T="string" Size="Size.Small" Color="Color.Success">@context.Status</MudChip>
                            break;
                        default:
                            <MudChip T="string" Size="Size.Small" Color="Color.Error">@context.Status</MudChip>
                            break;
                    }
                </MudTd>
                <MudTd DataLabel="上传时间">@FormatDateTimeOst(context.Created!.Value)</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small"
                                   OnClick="@(() => CopyDocumentUrl(context.Url))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Download" Size="Size.Small"
                                   OnClick="@(() => DownloadDocument(context))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                   OnClick="@(() => DeleteDocument(context.Id))"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <div class="d-flex flex-column align-center mt-4">
            <MudPagination ShowFirstButton="true" ShowLastButton="true" Class="mt-4"
                           Count="@(_kbDocs.TotalPages ?? 0)"
                           SelectedChanged="KbDocPageChanged"/>
        </div>
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.Build" Text="量化队列">
        <MudToolBar Class="align-center">
            <MudStack Row Spacing="1">
                <MudTextField T="string"
                              @bind-Value="_quantifyListSearchString" Adornment="Adornment.End" @onkeypress="quantifyListSearchOnEnter"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                </MudTextField>
            </MudStack>
            <MudSpacer/>
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh"
                    OnClick="Refresh">刷新
            </MudButton>
        </MudToolBar>
        <MudTable Items="@_quantifyLists.Items" Hover="true">
            <HeaderContent>
                <MudTh>文件名</MudTh>
                <MudTh>任务Id</MudTh>
                <MudTh>进度</MudTh>
                <MudTh>状态</MudTh>
                <MudTh>备注</MudTh>
                <MudTh>创建时间</MudTh>
                <MudTh>完成时间</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="文件名">@context.FileName</MudTd>
                <MudTd DataLabel="任务Id">@context.Id</MudTd>
                <MudTd DataLabel="进度">
                    @switch (context.Status)
                    {
                        case QuantizedListState.Pending:
                            <MudProgressLinear Value="100" Indeterminate="true" Color="Color.Info" Style="min-width:100px;"/>
                            break;
                        case QuantizedListState.Success:
                            <MudProgressLinear Value="100" Indeterminate="false" Color="Color.Success" Style="min-width:100px;"/>
                            break;
                        default:
                            <MudProgressLinear Value="100" Indeterminate="false" Color="Color.Error" Style="min-width:100px;"/>
                            break;
                    }
                </MudTd>
                <MudTd DataLabel="状态">
                    @switch (context.Status)
                    {
                        case QuantizedListState.Pending:
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@context.Status</MudChip>
                            break;
                        case QuantizedListState.Success:
                            <MudChip T="string" Size="Size.Small" Color="Color.Success">@context.Status</MudChip>
                            break;
                        default:
                            <MudChip T="string" Size="Size.Small" Color="Color.Error">@context.Status</MudChip>
                            break;
                    }
                </MudTd>
                <MudTd DataLabel="备注">
                    <MudTooltip Text="@context.Remark">
                        <ChildContent>
                            @TruncateText(context.Remark, 40)
                        </ChildContent>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="上传时间">@(context.Created != null ? FormatDateTimeOst(context.Created.Value) : "")</MudTd>
                <MudTd DataLabel="完成时间">@(context.ProcessTime != null ? FormatDateTimeOst(context.ProcessTime.Value) : "")</MudTd>
            </RowTemplate>
        </MudTable>
        <div class="d-flex flex-column align-center mt-4">
            <MudPagination ShowFirstButton="true" ShowLastButton="true" Class="mt-4"
                           Count="@(_quantifyLists.TotalPages ?? 0)"
                           SelectedChanged="QuantifyListPageChanged"/>
        </div>
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.ContentPasteSearch" Text="搜索测试">
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="_vectorSearchString" Placeholder="请输入搜索内容..."
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Class="w-100 mb-2"/>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearch">搜索</MudButton>
            </MudItem>
            <MudItem xs="12" sm="8">
                <MudText Typo="Typo.h6" Class="mb-2">搜索结果</MudText>
                <MudTable Items="@_searchResults" Hover="true" Bordered="true" Striped="true">
                    <HeaderContent>
                        <MudTh>文件名</MudTh>
                        <MudTh>相似度</MudTh>
                        <MudTh>内容片段</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="文件名">@context.FileName</MudTd>
                        <MudTd DataLabel="相似度">@context.Score.ToString("P1")</MudTd>
                        <MudTd DataLabel="内容片段">@context.Snippet</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>
<style>
    .kbs-tabs .mud-tabs-tabbar {
        background-color: transparent;
    }

    .file-item {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .file-item-contenttype {
        font-style: italic;
        opacity: 0.8;
    }
</style>