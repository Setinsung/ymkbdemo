@page "/applications"
@using YmKB.UI.Models
@using YmKB.UI.Services
@inject IApplicationService ApplicationService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-4">
                    <MudText Typo="Typo.h5">应用列表</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateApplication">创建应用</MudButton>
                </MudStack>

                <MudTextField @bind-Value="searchText" Placeholder="输入回车" Immediate="true"
                            AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start"
                            OnKeyDown="@SearchOnEnter" Class="mb-4"/>

                <MudGrid>
                    @foreach (var app in filteredApplications)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudAvatar Color="Color.Primary">
                                            <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                        </MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@app.Name</MudText>
                                        <MudText Typo="Typo.body2">@app.Description</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText>
                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary">@app.Type</MudChip>
                                    </MudText>
                                    <MudText Class="mt-2">
                                        <MudChip T="string" Size="Size.Small" Color="Color.Secondary">@app.ConversationModel</MudChip>
                                    </MudText>
                                    <MudText Class="mt-2">
                                        <MudChip T="string" Size="Size.Small" Color="Color.Info">@app.EmbeddingModel</MudChip>
                                    </MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton OnClick="@(() => EditApplication(app.Id))">修改</MudButton>
                                    <MudButton OnClick="@(() => UseApplication(app.Id))">使用</MudButton>
                                    <MudButton Color="Color.Error" OnClick="@(() => DeleteApplication(app))">删除</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>

                <MudPagination Count="@((int)Math.Ceiling(totalItems / (double)pageSize))" 
                             @bind-Selected="currentPage" 
                             Class="mt-4 d-flex justify-center"/>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Application> applications = new();
    private string searchText = "";
    private bool loading = false;
    private int totalItems;
    private int currentPage = 1;
    private int pageSize = 10;

    private IEnumerable<Application> filteredApplications => applications;

    protected override async Task OnInitializedAsync()
    {
        await LoadApplications();
    }

    private async Task LoadApplications()
    {
        loading = true;
        try
        {
            var result = await ApplicationService.GetApplicationsAsync(searchText, currentPage, pageSize);
            applications = result.Items;
            totalItems = result.TotalCount;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadApplications();
        }
    }

    private void CreateApplication()
    {
        NavigationManager.NavigateTo("/applications/create");
    }

    private void EditApplication(string id)
    {
        NavigationManager.NavigateTo($"/applications/{id}/edit");
    }

    private void UseApplication(string id)
    {
        // 使用功能待实现
    }

    private void UseApplicationExternal(string id)
    {
        // 外部使用功能待实现
    }

    private async Task DeleteApplication(Application app)
    {
        var result = await ApplicationService.DeleteApplicationAsync(app.Id);
        if (result)
        {
            await LoadApplications();
        }
    }
}