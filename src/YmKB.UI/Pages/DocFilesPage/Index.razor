@page "/docfiles"
@inject IJSRuntime JS
@inject IDialogService DialogService

@code {
    private PaginatedResultOfKbDocFileDto _kbDocs = new();
    private string _searchString = "";
    private KbDocFileDto? _fileListSelected;

    private bool loading = false;
    private int pageIndex = 1;
    private int pageSize = 12;
    private int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadKbDocs();
    }

    private async Task LoadKbDocs()
    {
        try
        {
            PaginatedResultOfKbDocFileDto? result = await ApiClient.KbDocFiles.Pagination.PostAsync(new KbDocFilesWithPaginationQuery()
            {
                Keywords = _searchString,
                PageNumber = pageIndex - 1,
                PageSize = pageSize,
                OrderBy = "Id"
            });
            _kbDocs = result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "查询失败");
            Snackbar.Add("查询失败", Severity.Error);
            _kbDocs = new();
        }
    }

    private async Task PageChanged(int i)
    {
        pageIndex = i;
        await LoadKbDocs();
    }

    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadKbDocs();
        }
    }

    private Task<MudExFileDisplayContentErrorResult> HandleContentError(IMudExFileDisplayInfos arg)
    {
        if (arg.ContentType.Contains("word"))
        {
            return Task.FromResult(MudExFileDisplayContentErrorResult
                .RedirectTo("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTiZiqnBKWS8NHcKbRH04UkYjrCgxUMz6sVNw&usqp=CAU", "image/png")
                .WithMessage("No word plugin found we display a sheep"));
        }

        return Task.FromResult(MudExFileDisplayContentErrorResult.Unhandled);
    }

    private async Task CopyDocumentUrl(string? url)
    {
        if (!string.IsNullOrEmpty(url))
        {
            await new ClipboardInterop(JS).CopyToClipboard(CombinePathWithBaseUrl(appSettings.ServiceBaseUrl, url));
        }
    }

    private async Task DeleteDocument(string? id)
    {
        await CommonDialogService.ShowConfirmationDialog("确认删除", "您确定要删除所选项目吗？", async () =>
        {
            await ApiClient.KbDocFiles.DeleteAsync(new DeleteKbDocFileCommand { Ids = [id!] });
            await LoadKbDocs();
            Snackbar.Add("删除成功", Severity.Success);
        });
    }

    private async Task DownloadDocument(KbDocFileDto? file)
    {
        if (file is null) return;
        await JS.InvokeVoidAsync("triggerFileDownload", file.FileName, CombinePathWithBaseUrl(appSettings.ServiceBaseUrl, file.Url!));
    }

    private async Task OpenAsDialog()
    {
        await DialogService.ShowFileDisplayDialogAsync(_fileListSelected.Url, _fileListSelected.FileName, _fileListSelected.Type, HandleContentError);
    }

}

<MudText Typo="Typo.h5" Class="mb-4">文档管理</MudText>

<MudToolBar Class="align-center">
    <MudStack Row Spacing="1">
        <MudTextField T="string"
                      @bind-Value="_searchString" Adornment="Adornment.End" @onkeyup="SearchOnEnter"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
        </MudTextField>
    </MudStack>
    <MudSpacer/>
    @if (_fileListSelected != null)
    {
        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Success"
                       OnClick="@(() => DownloadDocument(_fileListSelected))"/>
        <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Info"
                       OnClick="@(() => CopyDocumentUrl(_fileListSelected.Url))"/>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                       OnClick="@(() => DeleteDocument(_fileListSelected.Id))"/>
    }
</MudToolBar>
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudPaper Class="pb-4">
            <MudList T="KbDocFileDto" @bind-SelectedValue="_fileListSelected">
                @foreach (var item in _kbDocs.Items ?? [])
                {
                    <MudListItem Value="item">
                        <div class="file-item">
                            <MudExIcon
                                Icon="@BrowserFileExt.IconForFile(item.Type)"
                                Color="@BrowserFileExt.GetPreferredColor(item.Type)"
                            />
                            <MudTooltip Text="@item.FileName">
                                <ChildContent>
                                    <MudText Typo="Typo.subtitle2">@TruncateText(item.FileName, 35)</MudText>
                                </ChildContent>
                            </MudTooltip>
                            <MudTooltip Text="@item.Type">
                                <ChildContent>
                                    <MudText Typo="Typo.body2"
                                             Class="file-item-contenttype">@TruncateText(item.Type, 30)</MudText>
                                </ChildContent>
                            </MudTooltip>
                            <MudTooltip Text="@FormatDateTimeOst(item.Created!.Value)">
                                <ChildContent>
                                    <MudText
                                        Typo="Typo.body2">@TruncateText(FormatDateTimeOst(item.Created!.Value), 30)</MudText>
                                </ChildContent>
                            </MudTooltip>
                            <MudTooltip Text="@FormatFileSize(item.Size!.Value)">
                                <ChildContent>
                                    <MudText
                                        Typo="Typo.body2">@TruncateText(FormatFileSize(item.Size.Value), 10)</MudText>
                                </ChildContent>
                            </MudTooltip>
                        </div>
                    </MudListItem>
                }
            </MudList>
            <div class="d-flex flex-column align-center mt-4">
                <MudPagination ShowFirstButton="true" ShowLastButton="true" Class="mt-4"
                               Count="@(_kbDocs.TotalPages ?? 0)"
                               SelectedChanged="PageChanged"/>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12">
        <MudPaper>

            @if (_fileListSelected?.Url != null)
            {
                <div style="width: 100%; height: 800px; margin-top: 20px">
                    <MudExFileDisplay HandleContentErrorFunc="@HandleContentError"
                                      StreamUrlHandling="StreamUrlHandling.DataUrl"
                                      ColorizeIcons="true"
                                      Dense="true"
                                      FileName="@_fileListSelected.FileName" Url="@(CombinePathWithBaseUrl(appSettings.ServiceBaseUrl, _fileListSelected.Url))"
                                      ContentType="@_fileListSelected.Type"></MudExFileDisplay>
                </div>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
<style>
    .file-item {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .file-item-contenttype {
        font-style: italic;
        opacity: 0.8;
    }
</style>