@using System.Linq.Expressions
@code {
    [Parameter] public string AdornmentIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? RequiredError { get; set; }
    [Parameter] public Expression<Func<string>>? Field { get; set; }
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Text;
    [Parameter] public bool Required { get; set; }
    
    private bool isVisible;

    private async Task ToggleVisibility()
    {
        isVisible = !isVisible;
        AdornmentIcon = isVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }
    
    private async Task OnValueChanged(string newValue)
    {
        Value = newValue;
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(newValue);
        }
    }
}

<MudTextField InputType="@(isVisible ? InputType.Text : InputType.Password)"
              T="string"
              Value="@Value"
              ValueChanged="OnValueChanged"
              For="@Field"
              Label="@Label"
              Placeholder="@Placeholder"
              Required="@Required"
              Variant="@Variant"
              RequiredError="@RequiredError"
              Adornment="Adornment.End"
              AdornmentIcon="@AdornmentIcon"
              OnAdornmentClick="ToggleVisibility"
              AdornmentAriaLabel="Show Password">
</MudTextField>